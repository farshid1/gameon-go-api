package gameon

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"time"

	"golang.org/x/crypto/bcrypt"
	"ledape.com/gameon/ent"
	"ledape.com/gameon/ent/gameparticipant"
	"ledape.com/gameon/ent/user"
)

// CreatedBy is the resolver for the createdBy field.
func (r *gameResolver) CreatedBy(ctx context.Context, obj *ent.Game) (*ent.User, error) {
	panic(fmt.Errorf("not implemented"))
}

// Participants is the resolver for the participants field.
func (r *gameResolver) Participants(ctx context.Context, obj *ent.Game) ([]*ent.User, error) {
	panic(fmt.Errorf("not implemented: Participants - participants"))
}

// Time is the resolver for the time field.
func (r *gameResolver) Time(ctx context.Context, obj *ent.Game) (string, error) {
	return obj.CreateTime.Format(time.RFC3339), nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, loginInput *LoginInput) (*AuthPayload, error) {
	user, err := r.client.User.
		Query().
		Where(user.EmailEQ(loginInput.Email)).
		Only(ctx)
	if err != nil {
		return nil, fmt.Errorf("User not found - failed querying user: %w", err)
	}
	err = bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(loginInput.Password))
	if err != nil {
		return nil, fmt.Errorf("Invalid password provided")
	}

	return CreateAuthTokenAndReturnAuthPayload(ctx, r.redisClient, user)
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, signupInput *SignupInput) (*AuthPayload, error) {
	existingUser, err := r.client.User.
		Query().
		Where(user.EmailEQ(signupInput.Email)).
		Only(ctx)
	if existingUser != nil {
		return nil, fmt.Errorf("User Already exist - failed querying user: %w", err)
	}
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(signupInput.Password), 10)
	if err != nil {
		panic("failed to hash the password")
	}
	user := r.client.User.Create().
		SetEmail(signupInput.Email).
		SetName(signupInput.Name).
		SetPassword(string(hashedPassword)).
		SaveX(ctx)

	return CreateAuthTokenAndReturnAuthPayload(ctx, r.redisClient, user)
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string) (*AuthPayload, error) {
	// Create a new access token and return

	return RecreateAccessToken(ctx, r.client, r.redisClient, token)
}

// CreateGame is the resolver for the createGame field.
func (r *mutationResolver) CreateGame(ctx context.Context, gameInput *GameInput) (*ent.Game, error) {
	user := ForContext(ctx)
	startTime := time.Unix(int64(gameInput.Time), 0)
	game := r.client.Game.Create().
		SetTime(startTime).
		SetCreator(user).
		SetTitle(gameInput.Title).
		SaveX(ctx)
	r.client.GameParticipant.Create().SetGame(game).SetUser(user).SetRsvpStatus(gameparticipant.RsvpStatusYES).SaveX(ctx)
	return game, nil
}

// RespondToGameInvite is the resolver for the respondToGameInvite field.
func (r *mutationResolver) RespondToGameInvite(ctx context.Context, gameResponseInput *GameResponseInput) (*ent.Game, error) {
	user := ForContext(ctx)
	err := r.client.GameParticipant.Create().
		SetGameID(gameResponseInput.GameID).
		SetUser(user).
		SetRsvpStatus(gameResponseInput.Rsvp).
		OnConflictColumns("user_id", "game_id").
		UpdateNewValues().
		Exec(ctx)
	if err != nil {
		return nil, err
	}
	gameParticipant, err := r.client.GameParticipant.
		Query().
		Where(gameparticipant.GameID(gameResponseInput.GameID)).
		Where(gameparticipant.UserID(user.ID)).
		First(ctx)
	if err != nil {
		return nil, err
	}
	game, err := gameParticipant.QueryGame().First(ctx)
	if err != nil {
		return nil, err
	}
	return game, nil
}

// UpcomingGames is the resolver for the upcomingGames field.
func (r *queryResolver) UpcomingGames(ctx context.Context) ([]*ent.Game, error) {
	return r.client.User.Query().QueryParticipatingGames().AllX(ctx), nil
}

// Game returns GameResolver implementation.
func (r *Resolver) Game() GameResolver { return &gameResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type gameResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
