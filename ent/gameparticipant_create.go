// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ledape.com/gameon/ent/game"
	"ledape.com/gameon/ent/gameparticipant"
	"ledape.com/gameon/ent/user"
)

// GameParticipantCreate is the builder for creating a GameParticipant entity.
type GameParticipantCreate struct {
	config
	mutation *GameParticipantMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gpc *GameParticipantCreate) SetCreatedAt(t time.Time) *GameParticipantCreate {
	gpc.mutation.SetCreatedAt(t)
	return gpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpc *GameParticipantCreate) SetNillableCreatedAt(t *time.Time) *GameParticipantCreate {
	if t != nil {
		gpc.SetCreatedAt(*t)
	}
	return gpc
}

// SetRsvpStatus sets the "rsvp_status" field.
func (gpc *GameParticipantCreate) SetRsvpStatus(gs gameparticipant.RsvpStatus) *GameParticipantCreate {
	gpc.mutation.SetRsvpStatus(gs)
	return gpc
}

// SetGameID sets the "game_id" field.
func (gpc *GameParticipantCreate) SetGameID(i int) *GameParticipantCreate {
	gpc.mutation.SetGameID(i)
	return gpc
}

// SetUserID sets the "user_id" field.
func (gpc *GameParticipantCreate) SetUserID(i int) *GameParticipantCreate {
	gpc.mutation.SetUserID(i)
	return gpc
}

// SetUser sets the "user" edge to the User entity.
func (gpc *GameParticipantCreate) SetUser(u *User) *GameParticipantCreate {
	return gpc.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (gpc *GameParticipantCreate) SetGame(g *Game) *GameParticipantCreate {
	return gpc.SetGameID(g.ID)
}

// Mutation returns the GameParticipantMutation object of the builder.
func (gpc *GameParticipantCreate) Mutation() *GameParticipantMutation {
	return gpc.mutation
}

// Save creates the GameParticipant in the database.
func (gpc *GameParticipantCreate) Save(ctx context.Context) (*GameParticipant, error) {
	var (
		err  error
		node *GameParticipant
	)
	gpc.defaults()
	if len(gpc.hooks) == 0 {
		if err = gpc.check(); err != nil {
			return nil, err
		}
		node, err = gpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameParticipantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gpc.check(); err != nil {
				return nil, err
			}
			gpc.mutation = mutation
			if node, err = gpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(gpc.hooks) - 1; i >= 0; i-- {
			if gpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gpc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gpc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GameParticipant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameParticipantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GameParticipantCreate) SaveX(ctx context.Context) *GameParticipant {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GameParticipantCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GameParticipantCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GameParticipantCreate) defaults() {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		v := gameparticipant.DefaultCreatedAt()
		gpc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GameParticipantCreate) check() error {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GameParticipant.created_at"`)}
	}
	if _, ok := gpc.mutation.RsvpStatus(); !ok {
		return &ValidationError{Name: "rsvp_status", err: errors.New(`ent: missing required field "GameParticipant.rsvp_status"`)}
	}
	if v, ok := gpc.mutation.RsvpStatus(); ok {
		if err := gameparticipant.RsvpStatusValidator(v); err != nil {
			return &ValidationError{Name: "rsvp_status", err: fmt.Errorf(`ent: validator failed for field "GameParticipant.rsvp_status": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game_id", err: errors.New(`ent: missing required field "GameParticipant.game_id"`)}
	}
	if _, ok := gpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GameParticipant.user_id"`)}
	}
	if _, ok := gpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "GameParticipant.user"`)}
	}
	if _, ok := gpc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "GameParticipant.game"`)}
	}
	return nil
}

func (gpc *GameParticipantCreate) sqlSave(ctx context.Context) (*GameParticipant, error) {
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (gpc *GameParticipantCreate) createSpec() (*GameParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &GameParticipant{config: gpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: gameparticipant.Table,
		}
	)
	_spec.OnConflict = gpc.conflict
	if value, ok := gpc.mutation.CreatedAt(); ok {
		_spec.SetField(gameparticipant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gpc.mutation.RsvpStatus(); ok {
		_spec.SetField(gameparticipant.FieldRsvpStatus, field.TypeEnum, value)
		_node.RsvpStatus = value
	}
	if nodes := gpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.UserTable,
			Columns: []string{gameparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gpc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.GameTable,
			Columns: []string{gameparticipant.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GameID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameParticipant.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameParticipantUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gpc *GameParticipantCreate) OnConflict(opts ...sql.ConflictOption) *GameParticipantUpsertOne {
	gpc.conflict = opts
	return &GameParticipantUpsertOne{
		create: gpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameParticipant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gpc *GameParticipantCreate) OnConflictColumns(columns ...string) *GameParticipantUpsertOne {
	gpc.conflict = append(gpc.conflict, sql.ConflictColumns(columns...))
	return &GameParticipantUpsertOne{
		create: gpc,
	}
}

type (
	// GameParticipantUpsertOne is the builder for "upsert"-ing
	//  one GameParticipant node.
	GameParticipantUpsertOne struct {
		create *GameParticipantCreate
	}

	// GameParticipantUpsert is the "OnConflict" setter.
	GameParticipantUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *GameParticipantUpsert) SetCreatedAt(v time.Time) *GameParticipantUpsert {
	u.Set(gameparticipant.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GameParticipantUpsert) UpdateCreatedAt() *GameParticipantUpsert {
	u.SetExcluded(gameparticipant.FieldCreatedAt)
	return u
}

// SetRsvpStatus sets the "rsvp_status" field.
func (u *GameParticipantUpsert) SetRsvpStatus(v gameparticipant.RsvpStatus) *GameParticipantUpsert {
	u.Set(gameparticipant.FieldRsvpStatus, v)
	return u
}

// UpdateRsvpStatus sets the "rsvp_status" field to the value that was provided on create.
func (u *GameParticipantUpsert) UpdateRsvpStatus() *GameParticipantUpsert {
	u.SetExcluded(gameparticipant.FieldRsvpStatus)
	return u
}

// SetGameID sets the "game_id" field.
func (u *GameParticipantUpsert) SetGameID(v int) *GameParticipantUpsert {
	u.Set(gameparticipant.FieldGameID, v)
	return u
}

// UpdateGameID sets the "game_id" field to the value that was provided on create.
func (u *GameParticipantUpsert) UpdateGameID() *GameParticipantUpsert {
	u.SetExcluded(gameparticipant.FieldGameID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GameParticipantUpsert) SetUserID(v int) *GameParticipantUpsert {
	u.Set(gameparticipant.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameParticipantUpsert) UpdateUserID() *GameParticipantUpsert {
	u.SetExcluded(gameparticipant.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GameParticipant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *GameParticipantUpsertOne) UpdateNewValues() *GameParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.GameParticipant.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GameParticipantUpsertOne) Ignore() *GameParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameParticipantUpsertOne) DoNothing() *GameParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameParticipantCreate.OnConflict
// documentation for more info.
func (u *GameParticipantUpsertOne) Update(set func(*GameParticipantUpsert)) *GameParticipantUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameParticipantUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GameParticipantUpsertOne) SetCreatedAt(v time.Time) *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GameParticipantUpsertOne) UpdateCreatedAt() *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetRsvpStatus sets the "rsvp_status" field.
func (u *GameParticipantUpsertOne) SetRsvpStatus(v gameparticipant.RsvpStatus) *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetRsvpStatus(v)
	})
}

// UpdateRsvpStatus sets the "rsvp_status" field to the value that was provided on create.
func (u *GameParticipantUpsertOne) UpdateRsvpStatus() *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateRsvpStatus()
	})
}

// SetGameID sets the "game_id" field.
func (u *GameParticipantUpsertOne) SetGameID(v int) *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetGameID(v)
	})
}

// UpdateGameID sets the "game_id" field to the value that was provided on create.
func (u *GameParticipantUpsertOne) UpdateGameID() *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateGameID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GameParticipantUpsertOne) SetUserID(v int) *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameParticipantUpsertOne) UpdateUserID() *GameParticipantUpsertOne {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *GameParticipantUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameParticipantCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameParticipantUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// GameParticipantCreateBulk is the builder for creating many GameParticipant entities in bulk.
type GameParticipantCreateBulk struct {
	config
	builders []*GameParticipantCreate
	conflict []sql.ConflictOption
}

// Save creates the GameParticipant entities in the database.
func (gpcb *GameParticipantCreateBulk) Save(ctx context.Context) ([]*GameParticipant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GameParticipant, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GameParticipantCreateBulk) SaveX(ctx context.Context) []*GameParticipant {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GameParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GameParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameParticipant.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameParticipantUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (gpcb *GameParticipantCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameParticipantUpsertBulk {
	gpcb.conflict = opts
	return &GameParticipantUpsertBulk{
		create: gpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameParticipant.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gpcb *GameParticipantCreateBulk) OnConflictColumns(columns ...string) *GameParticipantUpsertBulk {
	gpcb.conflict = append(gpcb.conflict, sql.ConflictColumns(columns...))
	return &GameParticipantUpsertBulk{
		create: gpcb,
	}
}

// GameParticipantUpsertBulk is the builder for "upsert"-ing
// a bulk of GameParticipant nodes.
type GameParticipantUpsertBulk struct {
	create *GameParticipantCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GameParticipant.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *GameParticipantUpsertBulk) UpdateNewValues() *GameParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameParticipant.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GameParticipantUpsertBulk) Ignore() *GameParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameParticipantUpsertBulk) DoNothing() *GameParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameParticipantCreateBulk.OnConflict
// documentation for more info.
func (u *GameParticipantUpsertBulk) Update(set func(*GameParticipantUpsert)) *GameParticipantUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameParticipantUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GameParticipantUpsertBulk) SetCreatedAt(v time.Time) *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GameParticipantUpsertBulk) UpdateCreatedAt() *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetRsvpStatus sets the "rsvp_status" field.
func (u *GameParticipantUpsertBulk) SetRsvpStatus(v gameparticipant.RsvpStatus) *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetRsvpStatus(v)
	})
}

// UpdateRsvpStatus sets the "rsvp_status" field to the value that was provided on create.
func (u *GameParticipantUpsertBulk) UpdateRsvpStatus() *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateRsvpStatus()
	})
}

// SetGameID sets the "game_id" field.
func (u *GameParticipantUpsertBulk) SetGameID(v int) *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetGameID(v)
	})
}

// UpdateGameID sets the "game_id" field to the value that was provided on create.
func (u *GameParticipantUpsertBulk) UpdateGameID() *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateGameID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GameParticipantUpsertBulk) SetUserID(v int) *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GameParticipantUpsertBulk) UpdateUserID() *GameParticipantUpsertBulk {
	return u.Update(func(s *GameParticipantUpsert) {
		s.UpdateUserID()
	})
}

// Exec executes the query.
func (u *GameParticipantUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GameParticipantCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameParticipantCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameParticipantUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
