// Code generated by ent, DO NOT EDIT.

package gameparticipant

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the gameparticipant type in the database.
	Label = "game_participant"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldRsvpStatus holds the string denoting the rsvp_status field in the database.
	FieldRsvpStatus = "rsvp_status"
	// FieldGameID holds the string denoting the game_id field in the database.
	FieldGameID = "game_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// GameFieldID holds the string denoting the ID field of the Game.
	GameFieldID = "id"
	// Table holds the table name of the gameparticipant in the database.
	Table = "game_participants"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "game_participants"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "game_participants"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_id"
)

// Columns holds all SQL columns for gameparticipant fields.
var Columns = []string{
	FieldCreatedAt,
	FieldRsvpStatus,
	FieldGameID,
	FieldUserID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// RsvpStatus defines the type for the "rsvp_status" enum field.
type RsvpStatus string

// RsvpStatus values.
const (
	RsvpStatusYES   RsvpStatus = "YES"
	RsvpStatusNO    RsvpStatus = "NO"
	RsvpStatusMAYBE RsvpStatus = "MAYBE"
)

func (rs RsvpStatus) String() string {
	return string(rs)
}

// RsvpStatusValidator is a validator for the "rsvp_status" field enum values. It is called by the builders before save.
func RsvpStatusValidator(rs RsvpStatus) error {
	switch rs {
	case RsvpStatusYES, RsvpStatusNO, RsvpStatusMAYBE:
		return nil
	default:
		return fmt.Errorf("gameparticipant: invalid enum value for rsvp_status field: %q", rs)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e RsvpStatus) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *RsvpStatus) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = RsvpStatus(str)
	if err := RsvpStatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid RsvpStatus", str)
	}
	return nil
}
