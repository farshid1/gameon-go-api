// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"ledape.com/gameon/ent/game"
	"ledape.com/gameon/ent/gameparticipant"
	"ledape.com/gameon/ent/predicate"
	"ledape.com/gameon/ent/user"
)

// GameParticipantQuery is the builder for querying GameParticipant entities.
type GameParticipantQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GameParticipant
	withUser   *UserQuery
	withGame   *GameQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*GameParticipant) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameParticipantQuery builder.
func (gpq *GameParticipantQuery) Where(ps ...predicate.GameParticipant) *GameParticipantQuery {
	gpq.predicates = append(gpq.predicates, ps...)
	return gpq
}

// Limit adds a limit step to the query.
func (gpq *GameParticipantQuery) Limit(limit int) *GameParticipantQuery {
	gpq.limit = &limit
	return gpq
}

// Offset adds an offset step to the query.
func (gpq *GameParticipantQuery) Offset(offset int) *GameParticipantQuery {
	gpq.offset = &offset
	return gpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gpq *GameParticipantQuery) Unique(unique bool) *GameParticipantQuery {
	gpq.unique = &unique
	return gpq
}

// Order adds an order step to the query.
func (gpq *GameParticipantQuery) Order(o ...OrderFunc) *GameParticipantQuery {
	gpq.order = append(gpq.order, o...)
	return gpq
}

// QueryUser chains the current query on the "user" edge.
func (gpq *GameParticipantQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: gpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameparticipant.Table, gameparticipant.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gameparticipant.UserTable, gameparticipant.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(gpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGame chains the current query on the "game" edge.
func (gpq *GameParticipantQuery) QueryGame() *GameQuery {
	query := &GameQuery{config: gpq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gameparticipant.Table, gameparticipant.GameColumn, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gameparticipant.GameTable, gameparticipant.GameColumn),
		)
		fromU = sqlgraph.SetNeighbors(gpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameParticipant entity from the query.
// Returns a *NotFoundError when no GameParticipant was found.
func (gpq *GameParticipantQuery) First(ctx context.Context) (*GameParticipant, error) {
	nodes, err := gpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gameparticipant.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gpq *GameParticipantQuery) FirstX(ctx context.Context) *GameParticipant {
	node, err := gpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single GameParticipant entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameParticipant entity is found.
// Returns a *NotFoundError when no GameParticipant entities are found.
func (gpq *GameParticipantQuery) Only(ctx context.Context) (*GameParticipant, error) {
	nodes, err := gpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gameparticipant.Label}
	default:
		return nil, &NotSingularError{gameparticipant.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gpq *GameParticipantQuery) OnlyX(ctx context.Context) *GameParticipant {
	node, err := gpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of GameParticipants.
func (gpq *GameParticipantQuery) All(ctx context.Context) ([]*GameParticipant, error) {
	if err := gpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gpq *GameParticipantQuery) AllX(ctx context.Context) []*GameParticipant {
	nodes, err := gpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (gpq *GameParticipantQuery) Count(ctx context.Context) (int, error) {
	if err := gpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gpq *GameParticipantQuery) CountX(ctx context.Context) int {
	count, err := gpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gpq *GameParticipantQuery) Exist(ctx context.Context) (bool, error) {
	if err := gpq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gpq *GameParticipantQuery) ExistX(ctx context.Context) bool {
	exist, err := gpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameParticipantQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gpq *GameParticipantQuery) Clone() *GameParticipantQuery {
	if gpq == nil {
		return nil
	}
	return &GameParticipantQuery{
		config:     gpq.config,
		limit:      gpq.limit,
		offset:     gpq.offset,
		order:      append([]OrderFunc{}, gpq.order...),
		predicates: append([]predicate.GameParticipant{}, gpq.predicates...),
		withUser:   gpq.withUser.Clone(),
		withGame:   gpq.withGame.Clone(),
		// clone intermediate query.
		sql:    gpq.sql.Clone(),
		path:   gpq.path,
		unique: gpq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (gpq *GameParticipantQuery) WithUser(opts ...func(*UserQuery)) *GameParticipantQuery {
	query := &UserQuery{config: gpq.config}
	for _, opt := range opts {
		opt(query)
	}
	gpq.withUser = query
	return gpq
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (gpq *GameParticipantQuery) WithGame(opts ...func(*GameQuery)) *GameParticipantQuery {
	query := &GameQuery{config: gpq.config}
	for _, opt := range opts {
		opt(query)
	}
	gpq.withGame = query
	return gpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameParticipant.Query().
//		GroupBy(gameparticipant.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (gpq *GameParticipantQuery) GroupBy(field string, fields ...string) *GameParticipantGroupBy {
	grbuild := &GameParticipantGroupBy{config: gpq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gpq.sqlQuery(ctx), nil
	}
	grbuild.label = gameparticipant.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.GameParticipant.Query().
//		Select(gameparticipant.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (gpq *GameParticipantQuery) Select(fields ...string) *GameParticipantSelect {
	gpq.fields = append(gpq.fields, fields...)
	selbuild := &GameParticipantSelect{GameParticipantQuery: gpq}
	selbuild.label = gameparticipant.Label
	selbuild.flds, selbuild.scan = &gpq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GameParticipantSelect configured with the given aggregations.
func (gpq *GameParticipantQuery) Aggregate(fns ...AggregateFunc) *GameParticipantSelect {
	return gpq.Select().Aggregate(fns...)
}

func (gpq *GameParticipantQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gpq.fields {
		if !gameparticipant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gpq.path != nil {
		prev, err := gpq.path(ctx)
		if err != nil {
			return err
		}
		gpq.sql = prev
	}
	return nil
}

func (gpq *GameParticipantQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameParticipant, error) {
	var (
		nodes       = []*GameParticipant{}
		_spec       = gpq.querySpec()
		loadedTypes = [2]bool{
			gpq.withUser != nil,
			gpq.withGame != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameParticipant).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameParticipant{config: gpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gpq.modifiers) > 0 {
		_spec.Modifiers = gpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gpq.withUser; query != nil {
		if err := gpq.loadUser(ctx, query, nodes, nil,
			func(n *GameParticipant, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := gpq.withGame; query != nil {
		if err := gpq.loadGame(ctx, query, nodes, nil,
			func(n *GameParticipant, e *Game) { n.Edges.Game = e }); err != nil {
			return nil, err
		}
	}
	for i := range gpq.loadTotal {
		if err := gpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gpq *GameParticipantQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*GameParticipant, init func(*GameParticipant), assign func(*GameParticipant, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameParticipant)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gpq *GameParticipantQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*GameParticipant, init func(*GameParticipant), assign func(*GameParticipant, *Game)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameParticipant)
	for i := range nodes {
		fk := nodes[i].GameID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(game.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gpq *GameParticipantQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gpq.querySpec()
	if len(gpq.modifiers) > 0 {
		_spec.Modifiers = gpq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, gpq.driver, _spec)
}

func (gpq *GameParticipantQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := gpq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (gpq *GameParticipantQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameparticipant.Table,
			Columns: gameparticipant.Columns,
		},
		From:   gpq.sql,
		Unique: true,
	}
	if unique := gpq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gpq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := gpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gpq *GameParticipantQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gpq.driver.Dialect())
	t1 := builder.Table(gameparticipant.Table)
	columns := gpq.fields
	if len(columns) == 0 {
		columns = gameparticipant.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gpq.sql != nil {
		selector = gpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gpq.unique != nil && *gpq.unique {
		selector.Distinct()
	}
	for _, p := range gpq.predicates {
		p(selector)
	}
	for _, p := range gpq.order {
		p(selector)
	}
	if offset := gpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameParticipantGroupBy is the group-by builder for GameParticipant entities.
type GameParticipantGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gpgb *GameParticipantGroupBy) Aggregate(fns ...AggregateFunc) *GameParticipantGroupBy {
	gpgb.fns = append(gpgb.fns, fns...)
	return gpgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gpgb *GameParticipantGroupBy) Scan(ctx context.Context, v any) error {
	query, err := gpgb.path(ctx)
	if err != nil {
		return err
	}
	gpgb.sql = query
	return gpgb.sqlScan(ctx, v)
}

func (gpgb *GameParticipantGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range gpgb.fields {
		if !gameparticipant.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gpgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gpgb *GameParticipantGroupBy) sqlQuery() *sql.Selector {
	selector := gpgb.sql.Select()
	aggregation := make([]string, 0, len(gpgb.fns))
	for _, fn := range gpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gpgb.fields)+len(gpgb.fns))
		for _, f := range gpgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gpgb.fields...)...)
}

// GameParticipantSelect is the builder for selecting fields of GameParticipant entities.
type GameParticipantSelect struct {
	*GameParticipantQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gps *GameParticipantSelect) Aggregate(fns ...AggregateFunc) *GameParticipantSelect {
	gps.fns = append(gps.fns, fns...)
	return gps
}

// Scan applies the selector query and scans the result into the given value.
func (gps *GameParticipantSelect) Scan(ctx context.Context, v any) error {
	if err := gps.prepareQuery(ctx); err != nil {
		return err
	}
	gps.sql = gps.GameParticipantQuery.sqlQuery(ctx)
	return gps.sqlScan(ctx, v)
}

func (gps *GameParticipantSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gps.fns))
	for _, fn := range gps.fns {
		aggregation = append(aggregation, fn(gps.sql))
	}
	switch n := len(*gps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gps.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gps.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gps.sql.Query()
	if err := gps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
