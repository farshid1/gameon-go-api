// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ledape.com/gameon/ent/game"
	"ledape.com/gameon/ent/gameparticipant"
	"ledape.com/gameon/ent/predicate"
	"ledape.com/gameon/ent/user"
)

// GameParticipantUpdate is the builder for updating GameParticipant entities.
type GameParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *GameParticipantMutation
}

// Where appends a list predicates to the GameParticipantUpdate builder.
func (gpu *GameParticipantUpdate) Where(ps ...predicate.GameParticipant) *GameParticipantUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetCreatedAt sets the "created_at" field.
func (gpu *GameParticipantUpdate) SetCreatedAt(t time.Time) *GameParticipantUpdate {
	gpu.mutation.SetCreatedAt(t)
	return gpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpu *GameParticipantUpdate) SetNillableCreatedAt(t *time.Time) *GameParticipantUpdate {
	if t != nil {
		gpu.SetCreatedAt(*t)
	}
	return gpu
}

// SetRsvpStatus sets the "rsvp_status" field.
func (gpu *GameParticipantUpdate) SetRsvpStatus(gs gameparticipant.RsvpStatus) *GameParticipantUpdate {
	gpu.mutation.SetRsvpStatus(gs)
	return gpu
}

// SetGameID sets the "game_id" field.
func (gpu *GameParticipantUpdate) SetGameID(i int) *GameParticipantUpdate {
	gpu.mutation.SetGameID(i)
	return gpu
}

// SetUserID sets the "user_id" field.
func (gpu *GameParticipantUpdate) SetUserID(i int) *GameParticipantUpdate {
	gpu.mutation.SetUserID(i)
	return gpu
}

// SetUser sets the "user" edge to the User entity.
func (gpu *GameParticipantUpdate) SetUser(u *User) *GameParticipantUpdate {
	return gpu.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (gpu *GameParticipantUpdate) SetGame(g *Game) *GameParticipantUpdate {
	return gpu.SetGameID(g.ID)
}

// Mutation returns the GameParticipantMutation object of the builder.
func (gpu *GameParticipantUpdate) Mutation() *GameParticipantMutation {
	return gpu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gpu *GameParticipantUpdate) ClearUser() *GameParticipantUpdate {
	gpu.mutation.ClearUser()
	return gpu
}

// ClearGame clears the "game" edge to the Game entity.
func (gpu *GameParticipantUpdate) ClearGame() *GameParticipantUpdate {
	gpu.mutation.ClearGame()
	return gpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GameParticipantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gpu.hooks) == 0 {
		if err = gpu.check(); err != nil {
			return 0, err
		}
		affected, err = gpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameParticipantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gpu.check(); err != nil {
				return 0, err
			}
			gpu.mutation = mutation
			affected, err = gpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gpu.hooks) - 1; i >= 0; i-- {
			if gpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GameParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GameParticipantUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GameParticipantUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpu *GameParticipantUpdate) check() error {
	if v, ok := gpu.mutation.RsvpStatus(); ok {
		if err := gameparticipant.RsvpStatusValidator(v); err != nil {
			return &ValidationError{Name: "rsvp_status", err: fmt.Errorf(`ent: validator failed for field "GameParticipant.rsvp_status": %w`, err)}
		}
	}
	if _, ok := gpu.mutation.UserID(); gpu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameParticipant.user"`)
	}
	if _, ok := gpu.mutation.GameID(); gpu.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameParticipant.game"`)
	}
	return nil
}

func (gpu *GameParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameparticipant.Table,
			Columns: gameparticipant.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: gameparticipant.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: gameparticipant.FieldGameID,
				},
			},
		},
	}
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpu.mutation.CreatedAt(); ok {
		_spec.SetField(gameparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gpu.mutation.RsvpStatus(); ok {
		_spec.SetField(gameparticipant.FieldRsvpStatus, field.TypeEnum, value)
	}
	if gpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.UserTable,
			Columns: []string{gameparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.UserTable,
			Columns: []string{gameparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gpu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.GameTable,
			Columns: []string{gameparticipant.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.GameTable,
			Columns: []string{gameparticipant.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GameParticipantUpdateOne is the builder for updating a single GameParticipant entity.
type GameParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameParticipantMutation
}

// SetCreatedAt sets the "created_at" field.
func (gpuo *GameParticipantUpdateOne) SetCreatedAt(t time.Time) *GameParticipantUpdateOne {
	gpuo.mutation.SetCreatedAt(t)
	return gpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpuo *GameParticipantUpdateOne) SetNillableCreatedAt(t *time.Time) *GameParticipantUpdateOne {
	if t != nil {
		gpuo.SetCreatedAt(*t)
	}
	return gpuo
}

// SetRsvpStatus sets the "rsvp_status" field.
func (gpuo *GameParticipantUpdateOne) SetRsvpStatus(gs gameparticipant.RsvpStatus) *GameParticipantUpdateOne {
	gpuo.mutation.SetRsvpStatus(gs)
	return gpuo
}

// SetGameID sets the "game_id" field.
func (gpuo *GameParticipantUpdateOne) SetGameID(i int) *GameParticipantUpdateOne {
	gpuo.mutation.SetGameID(i)
	return gpuo
}

// SetUserID sets the "user_id" field.
func (gpuo *GameParticipantUpdateOne) SetUserID(i int) *GameParticipantUpdateOne {
	gpuo.mutation.SetUserID(i)
	return gpuo
}

// SetUser sets the "user" edge to the User entity.
func (gpuo *GameParticipantUpdateOne) SetUser(u *User) *GameParticipantUpdateOne {
	return gpuo.SetUserID(u.ID)
}

// SetGame sets the "game" edge to the Game entity.
func (gpuo *GameParticipantUpdateOne) SetGame(g *Game) *GameParticipantUpdateOne {
	return gpuo.SetGameID(g.ID)
}

// Mutation returns the GameParticipantMutation object of the builder.
func (gpuo *GameParticipantUpdateOne) Mutation() *GameParticipantMutation {
	return gpuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gpuo *GameParticipantUpdateOne) ClearUser() *GameParticipantUpdateOne {
	gpuo.mutation.ClearUser()
	return gpuo
}

// ClearGame clears the "game" edge to the Game entity.
func (gpuo *GameParticipantUpdateOne) ClearGame() *GameParticipantUpdateOne {
	gpuo.mutation.ClearGame()
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GameParticipantUpdateOne) Select(field string, fields ...string) *GameParticipantUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GameParticipant entity.
func (gpuo *GameParticipantUpdateOne) Save(ctx context.Context) (*GameParticipant, error) {
	var (
		err  error
		node *GameParticipant
	)
	if len(gpuo.hooks) == 0 {
		if err = gpuo.check(); err != nil {
			return nil, err
		}
		node, err = gpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameParticipantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gpuo.check(); err != nil {
				return nil, err
			}
			gpuo.mutation = mutation
			node, err = gpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gpuo.hooks) - 1; i >= 0; i-- {
			if gpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GameParticipant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameParticipantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GameParticipantUpdateOne) SaveX(ctx context.Context) *GameParticipant {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GameParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GameParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gpuo *GameParticipantUpdateOne) check() error {
	if v, ok := gpuo.mutation.RsvpStatus(); ok {
		if err := gameparticipant.RsvpStatusValidator(v); err != nil {
			return &ValidationError{Name: "rsvp_status", err: fmt.Errorf(`ent: validator failed for field "GameParticipant.rsvp_status": %w`, err)}
		}
	}
	if _, ok := gpuo.mutation.UserID(); gpuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameParticipant.user"`)
	}
	if _, ok := gpuo.mutation.GameID(); gpuo.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameParticipant.game"`)
	}
	return nil
}

func (gpuo *GameParticipantUpdateOne) sqlSave(ctx context.Context) (_node *GameParticipant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gameparticipant.Table,
			Columns: gameparticipant.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeInt,
					Column: gameparticipant.FieldUserID,
				},
				{
					Type:   field.TypeInt,
					Column: gameparticipant.FieldGameID,
				},
			},
		},
	}
	if id, ok := gpuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "GameParticipant.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := gpuo.mutation.GameID(); !ok {
		return nil, &ValidationError{Name: "game_id", err: errors.New(`ent: missing "GameParticipant.game_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !gameparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpuo.mutation.CreatedAt(); ok {
		_spec.SetField(gameparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gpuo.mutation.RsvpStatus(); ok {
		_spec.SetField(gameparticipant.FieldRsvpStatus, field.TypeEnum, value)
	}
	if gpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.UserTable,
			Columns: []string{gameparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.UserTable,
			Columns: []string{gameparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gpuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.GameTable,
			Columns: []string{gameparticipant.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameparticipant.GameTable,
			Columns: []string{gameparticipant.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameParticipant{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gameparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
