// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ledape.com/gameon/ent/game"
	"ledape.com/gameon/ent/predicate"
	"ledape.com/gameon/ent/user"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdateTime sets the "update_time" field.
func (gu *GameUpdate) SetUpdateTime(t time.Time) *GameUpdate {
	gu.mutation.SetUpdateTime(t)
	return gu
}

// SetTitle sets the "title" field.
func (gu *GameUpdate) SetTitle(s string) *GameUpdate {
	gu.mutation.SetTitle(s)
	return gu
}

// SetTime sets the "time" field.
func (gu *GameUpdate) SetTime(t time.Time) *GameUpdate {
	gu.mutation.SetTime(t)
	return gu
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (gu *GameUpdate) SetCreatorID(id int) *GameUpdate {
	gu.mutation.SetCreatorID(id)
	return gu
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (gu *GameUpdate) SetNillableCreatorID(id *int) *GameUpdate {
	if id != nil {
		gu = gu.SetCreatorID(*id)
	}
	return gu
}

// SetCreator sets the "creator" edge to the User entity.
func (gu *GameUpdate) SetCreator(u *User) *GameUpdate {
	return gu.SetCreatorID(u.ID)
}

// AddGameParticipantIDs adds the "game_participants" edge to the User entity by IDs.
func (gu *GameUpdate) AddGameParticipantIDs(ids ...int) *GameUpdate {
	gu.mutation.AddGameParticipantIDs(ids...)
	return gu
}

// AddGameParticipants adds the "game_participants" edges to the User entity.
func (gu *GameUpdate) AddGameParticipants(u ...*User) *GameUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddGameParticipantIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (gu *GameUpdate) ClearCreator() *GameUpdate {
	gu.mutation.ClearCreator()
	return gu
}

// ClearGameParticipants clears all "game_participants" edges to the User entity.
func (gu *GameUpdate) ClearGameParticipants() *GameUpdate {
	gu.mutation.ClearGameParticipants()
	return gu
}

// RemoveGameParticipantIDs removes the "game_participants" edge to User entities by IDs.
func (gu *GameUpdate) RemoveGameParticipantIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveGameParticipantIDs(ids...)
	return gu
}

// RemoveGameParticipants removes "game_participants" edges to User entities.
func (gu *GameUpdate) RemoveGameParticipants(u ...*User) *GameUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveGameParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	gu.defaults()
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GameUpdate) defaults() {
	if _, ok := gu.mutation.UpdateTime(); !ok {
		v := game.UpdateDefaultUpdateTime()
		gu.mutation.SetUpdateTime(v)
	}
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: game.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdateTime(); ok {
		_spec.SetField(game.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
	}
	if value, ok := gu.mutation.Time(); ok {
		_spec.SetField(game.FieldTime, field.TypeTime, value)
	}
	if gu.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.CreatorTable,
			Columns: []string{game.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.CreatorTable,
			Columns: []string{game.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GameParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		createE := &GameParticipantCreate{config: gu.config, mutation: newGameParticipantMutation(gu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGameParticipantsIDs(); len(nodes) > 0 && !gu.mutation.GameParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GameParticipantCreate{config: gu.config, mutation: newGameParticipantMutation(gu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GameParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GameParticipantCreate{config: gu.config, mutation: newGameParticipantMutation(gu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetUpdateTime sets the "update_time" field.
func (guo *GameUpdateOne) SetUpdateTime(t time.Time) *GameUpdateOne {
	guo.mutation.SetUpdateTime(t)
	return guo
}

// SetTitle sets the "title" field.
func (guo *GameUpdateOne) SetTitle(s string) *GameUpdateOne {
	guo.mutation.SetTitle(s)
	return guo
}

// SetTime sets the "time" field.
func (guo *GameUpdateOne) SetTime(t time.Time) *GameUpdateOne {
	guo.mutation.SetTime(t)
	return guo
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (guo *GameUpdateOne) SetCreatorID(id int) *GameUpdateOne {
	guo.mutation.SetCreatorID(id)
	return guo
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (guo *GameUpdateOne) SetNillableCreatorID(id *int) *GameUpdateOne {
	if id != nil {
		guo = guo.SetCreatorID(*id)
	}
	return guo
}

// SetCreator sets the "creator" edge to the User entity.
func (guo *GameUpdateOne) SetCreator(u *User) *GameUpdateOne {
	return guo.SetCreatorID(u.ID)
}

// AddGameParticipantIDs adds the "game_participants" edge to the User entity by IDs.
func (guo *GameUpdateOne) AddGameParticipantIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddGameParticipantIDs(ids...)
	return guo
}

// AddGameParticipants adds the "game_participants" edges to the User entity.
func (guo *GameUpdateOne) AddGameParticipants(u ...*User) *GameUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddGameParticipantIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearCreator clears the "creator" edge to the User entity.
func (guo *GameUpdateOne) ClearCreator() *GameUpdateOne {
	guo.mutation.ClearCreator()
	return guo
}

// ClearGameParticipants clears all "game_participants" edges to the User entity.
func (guo *GameUpdateOne) ClearGameParticipants() *GameUpdateOne {
	guo.mutation.ClearGameParticipants()
	return guo
}

// RemoveGameParticipantIDs removes the "game_participants" edge to User entities by IDs.
func (guo *GameUpdateOne) RemoveGameParticipantIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveGameParticipantIDs(ids...)
	return guo
}

// RemoveGameParticipants removes "game_participants" edges to User entities.
func (guo *GameUpdateOne) RemoveGameParticipants(u ...*User) *GameUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveGameParticipantIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	var (
		err  error
		node *Game
	)
	guo.defaults()
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Game)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GameUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdateTime(); !ok {
		v := game.UpdateDefaultUpdateTime()
		guo.mutation.SetUpdateTime(v)
	}
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: game.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdateTime(); ok {
		_spec.SetField(game.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
	}
	if value, ok := guo.mutation.Time(); ok {
		_spec.SetField(game.FieldTime, field.TypeTime, value)
	}
	if guo.mutation.CreatorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.CreatorTable,
			Columns: []string{game.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.CreatorTable,
			Columns: []string{game.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GameParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		createE := &GameParticipantCreate{config: guo.config, mutation: newGameParticipantMutation(guo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGameParticipantsIDs(); len(nodes) > 0 && !guo.mutation.GameParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GameParticipantCreate{config: guo.config, mutation: newGameParticipantMutation(guo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GameParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GameParticipantCreate{config: guo.config, mutation: newGameParticipantMutation(guo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
