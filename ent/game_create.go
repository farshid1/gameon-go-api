// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ledape.com/gameon/ent/game"
	"ledape.com/gameon/ent/user"
)

// GameCreate is the builder for creating a Game entity.
type GameCreate struct {
	config
	mutation *GameMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (gc *GameCreate) SetCreateTime(t time.Time) *GameCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (gc *GameCreate) SetNillableCreateTime(t *time.Time) *GameCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetUpdateTime sets the "update_time" field.
func (gc *GameCreate) SetUpdateTime(t time.Time) *GameCreate {
	gc.mutation.SetUpdateTime(t)
	return gc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (gc *GameCreate) SetNillableUpdateTime(t *time.Time) *GameCreate {
	if t != nil {
		gc.SetUpdateTime(*t)
	}
	return gc
}

// SetTitle sets the "title" field.
func (gc *GameCreate) SetTitle(s string) *GameCreate {
	gc.mutation.SetTitle(s)
	return gc
}

// SetTime sets the "time" field.
func (gc *GameCreate) SetTime(t time.Time) *GameCreate {
	gc.mutation.SetTime(t)
	return gc
}

// SetCreatorID sets the "creator" edge to the User entity by ID.
func (gc *GameCreate) SetCreatorID(id int) *GameCreate {
	gc.mutation.SetCreatorID(id)
	return gc
}

// SetNillableCreatorID sets the "creator" edge to the User entity by ID if the given value is not nil.
func (gc *GameCreate) SetNillableCreatorID(id *int) *GameCreate {
	if id != nil {
		gc = gc.SetCreatorID(*id)
	}
	return gc
}

// SetCreator sets the "creator" edge to the User entity.
func (gc *GameCreate) SetCreator(u *User) *GameCreate {
	return gc.SetCreatorID(u.ID)
}

// AddGameParticipantIDs adds the "game_participants" edge to the User entity by IDs.
func (gc *GameCreate) AddGameParticipantIDs(ids ...int) *GameCreate {
	gc.mutation.AddGameParticipantIDs(ids...)
	return gc
}

// AddGameParticipants adds the "game_participants" edges to the User entity.
func (gc *GameCreate) AddGameParticipants(u ...*User) *GameCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gc.AddGameParticipantIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gc *GameCreate) Mutation() *GameMutation {
	return gc.mutation
}

// Save creates the Game in the database.
func (gc *GameCreate) Save(ctx context.Context) (*Game, error) {
	var (
		err  error
		node *Game
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Game)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GameCreate) SaveX(ctx context.Context) *Game {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GameCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GameCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GameCreate) defaults() {
	if _, ok := gc.mutation.CreateTime(); !ok {
		v := game.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		v := game.DefaultUpdateTime()
		gc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GameCreate) check() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Game.create_time"`)}
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Game.update_time"`)}
	}
	if _, ok := gc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Game.title"`)}
	}
	if _, ok := gc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Game.time"`)}
	}
	return nil
}

func (gc *GameCreate) sqlSave(ctx context.Context) (*Game, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gc *GameCreate) createSpec() (*Game, *sqlgraph.CreateSpec) {
	var (
		_node = &Game{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: game.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: game.FieldID,
			},
		}
	)
	_spec.OnConflict = gc.conflict
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.SetField(game.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.UpdateTime(); ok {
		_spec.SetField(game.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := gc.mutation.Title(); ok {
		_spec.SetField(game.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := gc.mutation.Time(); ok {
		_spec.SetField(game.FieldTime, field.TypeTime, value)
		_node.Time = value
	}
	if nodes := gc.mutation.CreatorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.CreatorTable,
			Columns: []string{game.CreatorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_created_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GameParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.GameParticipantsTable,
			Columns: game.GameParticipantsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GameParticipantCreate{config: gc.config, mutation: newGameParticipantMutation(gc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Game.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (gc *GameCreate) OnConflict(opts ...sql.ConflictOption) *GameUpsertOne {
	gc.conflict = opts
	return &GameUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Game.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gc *GameCreate) OnConflictColumns(columns ...string) *GameUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GameUpsertOne{
		create: gc,
	}
}

type (
	// GameUpsertOne is the builder for "upsert"-ing
	//  one Game node.
	GameUpsertOne struct {
		create *GameCreate
	}

	// GameUpsert is the "OnConflict" setter.
	GameUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *GameUpsert) SetUpdateTime(v time.Time) *GameUpsert {
	u.Set(game.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *GameUpsert) UpdateUpdateTime() *GameUpsert {
	u.SetExcluded(game.FieldUpdateTime)
	return u
}

// SetTitle sets the "title" field.
func (u *GameUpsert) SetTitle(v string) *GameUpsert {
	u.Set(game.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GameUpsert) UpdateTitle() *GameUpsert {
	u.SetExcluded(game.FieldTitle)
	return u
}

// SetTime sets the "time" field.
func (u *GameUpsert) SetTime(v time.Time) *GameUpsert {
	u.Set(game.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *GameUpsert) UpdateTime() *GameUpsert {
	u.SetExcluded(game.FieldTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Game.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *GameUpsertOne) UpdateNewValues() *GameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(game.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Game.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *GameUpsertOne) Ignore() *GameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameUpsertOne) DoNothing() *GameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameCreate.OnConflict
// documentation for more info.
func (u *GameUpsertOne) Update(set func(*GameUpsert)) *GameUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *GameUpsertOne) SetUpdateTime(v time.Time) *GameUpsertOne {
	return u.Update(func(s *GameUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *GameUpsertOne) UpdateUpdateTime() *GameUpsertOne {
	return u.Update(func(s *GameUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTitle sets the "title" field.
func (u *GameUpsertOne) SetTitle(v string) *GameUpsertOne {
	return u.Update(func(s *GameUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GameUpsertOne) UpdateTitle() *GameUpsertOne {
	return u.Update(func(s *GameUpsert) {
		s.UpdateTitle()
	})
}

// SetTime sets the "time" field.
func (u *GameUpsertOne) SetTime(v time.Time) *GameUpsertOne {
	return u.Update(func(s *GameUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *GameUpsertOne) UpdateTime() *GameUpsertOne {
	return u.Update(func(s *GameUpsert) {
		s.UpdateTime()
	})
}

// Exec executes the query.
func (u *GameUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GameUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GameUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GameCreateBulk is the builder for creating many Game entities in bulk.
type GameCreateBulk struct {
	config
	builders []*GameCreate
	conflict []sql.ConflictOption
}

// Save creates the Game entities in the database.
func (gcb *GameCreateBulk) Save(ctx context.Context) ([]*Game, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Game, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GameCreateBulk) SaveX(ctx context.Context) []*Game {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GameCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GameCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Game.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
//
func (gcb *GameCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameUpsertBulk {
	gcb.conflict = opts
	return &GameUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Game.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (gcb *GameCreateBulk) OnConflictColumns(columns ...string) *GameUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GameUpsertBulk{
		create: gcb,
	}
}

// GameUpsertBulk is the builder for "upsert"-ing
// a bulk of Game nodes.
type GameUpsertBulk struct {
	create *GameCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Game.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *GameUpsertBulk) UpdateNewValues() *GameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(game.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Game.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *GameUpsertBulk) Ignore() *GameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameUpsertBulk) DoNothing() *GameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameCreateBulk.OnConflict
// documentation for more info.
func (u *GameUpsertBulk) Update(set func(*GameUpsert)) *GameUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *GameUpsertBulk) SetUpdateTime(v time.Time) *GameUpsertBulk {
	return u.Update(func(s *GameUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *GameUpsertBulk) UpdateUpdateTime() *GameUpsertBulk {
	return u.Update(func(s *GameUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetTitle sets the "title" field.
func (u *GameUpsertBulk) SetTitle(v string) *GameUpsertBulk {
	return u.Update(func(s *GameUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *GameUpsertBulk) UpdateTitle() *GameUpsertBulk {
	return u.Update(func(s *GameUpsert) {
		s.UpdateTitle()
	})
}

// SetTime sets the "time" field.
func (u *GameUpsertBulk) SetTime(v time.Time) *GameUpsertBulk {
	return u.Update(func(s *GameUpsert) {
		s.SetTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *GameUpsertBulk) UpdateTime() *GameUpsertBulk {
	return u.Update(func(s *GameUpsert) {
		s.UpdateTime()
	})
}

// Exec executes the query.
func (u *GameUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GameCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
