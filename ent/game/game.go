// Code generated by ent, DO NOT EDIT.

package game

import (
	"time"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// EdgeCreator holds the string denoting the creator edge name in mutations.
	EdgeCreator = "creator"
	// EdgeGameParticipants holds the string denoting the game_participants edge name in mutations.
	EdgeGameParticipants = "game_participants"
	// EdgeParticipants holds the string denoting the participants edge name in mutations.
	EdgeParticipants = "participants"
	// Table holds the table name of the game in the database.
	Table = "games"
	// CreatorTable is the table that holds the creator relation/edge.
	CreatorTable = "games"
	// CreatorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatorInverseTable = "users"
	// CreatorColumn is the table column denoting the creator relation/edge.
	CreatorColumn = "user_created_games"
	// GameParticipantsTable is the table that holds the game_participants relation/edge. The primary key declared below.
	GameParticipantsTable = "game_participants"
	// GameParticipantsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	GameParticipantsInverseTable = "users"
	// ParticipantsTable is the table that holds the participants relation/edge.
	ParticipantsTable = "game_participants"
	// ParticipantsInverseTable is the table name for the GameParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "gameparticipant" package.
	ParticipantsInverseTable = "game_participants"
	// ParticipantsColumn is the table column denoting the participants relation/edge.
	ParticipantsColumn = "game_id"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldTitle,
	FieldTime,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_created_games",
}

var (
	// GameParticipantsPrimaryKey and GameParticipantsColumn2 are the table columns denoting the
	// primary key for the game_participants relation (M2M).
	GameParticipantsPrimaryKey = []string{"user_id", "game_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)
